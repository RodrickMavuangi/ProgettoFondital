using Fondital.Shared.Models;
using Fondital.Shared.Models.Auth;
using Fondital.Shared.Services;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Fondital.Server.Controllers
{
    [Route("MailController")]
    [ApiController]
    public class MailController : ControllerBase
    {
        private readonly UserManager<Utente> _userManager;
        private readonly ILogger<MailController> _logger;
        private readonly IMailService _mailService;
        private readonly IServicePartnerService _spService;
        public MailController(ILogger<MailController> logger, UserManager<Utente> userManager, IMailService mailService, IServicePartnerService spService)
        {
            _userManager = userManager;
            _logger = logger;
            _mailService = mailService;
            _spService = spService;
        }


        [HttpPost]
        public async Task<IActionResult> SendMail([FromBody] MailRequest MailRequest)
        {
            try
            {
                var user = await _userManager.FindByEmailAsync(MailRequest.ToEmail);
                var code = await _userManager.GeneratePasswordResetTokenAsync(user);

                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = Url.Page(
                    "/Account/ResetPassword",
                    pageHandler: null,
                    values: new { area = "Identity", code },
                    protocol: Request.Scheme);

                MailRequest.Body = $"Inserisci una Nuova Passord per confermare l'account cliccando <a href='{callbackUrl}'>Account/Password</a>";
                await _mailService.SendEmailAsync(MailRequest);
                return Ok();
            }
            catch (Exception ex)
            {
                throw;
            }
        }


        [HttpPost("{servicePartnerId}")]
        public async Task<IActionResult> addUtente(int servicePartnerId, [FromBody] Utente utente)
        {
            try
            {

                ServicePartner _servicePartner = new ServicePartner();
                _servicePartner = await _spService.GetServicePartnerById(servicePartnerId);
                utente.ServicePartner = _servicePartner;

                //string PwdAutogenerated = GenerateRandomPassword();

                ServicePartner spToSave = new ServicePartner();
                var result = await _userManager.CreateAsync(utente);
                var user = await _userManager.FindByEmailAsync(utente.Email);

                var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = Url.Page(
                    "/Account/ResetPassword",
                    pageHandler: null,
                    values: new { area = "Identity", code },
                    protocol: Request.Scheme);

                MailRequest _mailRequest = new MailRequest()
                {
                    ToEmail = utente.Email,
                    Subject = "SETTARE LA PRIMA PASSWORD",
                    Body = $"Inserisci la prima Passord per confermare l'account cliccando <a href='{callbackUrl}'>Account/Password</a>"
                };
                await _mailService.SendEmailAsync(_mailRequest);
                return Ok();
            }
            catch (Exception e) { throw; }
        }
    }
}
